name: insta
services:
  caddy:
    image: caddy:latest
    command: caddy reverse-proxy --from localhost --to rails:3000
    restart: unless-stopped
    environment:
      - HOST=localhost
    ports:
      - "80:80"
      - "443:443"
      - "443:443/udp"
    volumes:
      - caddy_data:/data
      - caddy_config:/config

  sidekiq:
    <<: *backend
    command: bundle exec sidekiq -c 2

  db:
    image: postgres:16-alpine
    shm_size: 256mb
    build:
      context: .
      dockerfile: postgres/Dockerfile
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER}']
    environment:
      POSTGRES_USER: insta
      POSTGRES_PASSWORD: insta
      POSTGRES_DB: insta_development
      POSTGRES_HOST_AUTH_METHOD: trust
    volumes:
     - db_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5432:5432"

  testdb:
    image: postgres:16-alpine
    shm_size: 256mb
    build:
      context: .
      dockerfile: postgres/Dockerfile
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U $${POSTGRES_USER}']
    environment:
      POSTGRES_USER: insta
      POSTGRES_PASSWORD: insta
      POSTGRES_DB: insta_test
    volumes:
     - testdb_data:/var/lib/postgresql/data
    ports:
      - "127.0.0.1:5433:5433"

  redis:
    image: redis:7.2.5-alpine
    healthcheck:
      test: redis-cli ping
      interval: 1s
      timeout: 3s
      retries: 30
    ports:
      - 127.0.0.1:6379:6379

volumes:
  db_data:
  testdb_data:
  caddy_data:
  caddy_config:
  redis:
