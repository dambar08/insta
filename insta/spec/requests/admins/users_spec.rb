# frozen_string_literal: true

require "rails_helper"

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe("/admins/users", type: :request) do
  # This should return the minimal set of attributes required to create a valid
  # Admins::User. As you add validations to Admins::User, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip("Add a hash of attributes valid for your model")
  end

  let(:invalid_attributes) do
    skip("Add a hash of attributes invalid for your model")
  end

  describe "GET /index" do
    it "renders a successful response" do
      Admins::User.create!(valid_attributes)
      get admins_users_url
      expect(response).to(be_successful)
    end
  end

  describe "GET /show" do
    it "renders a successful response" do
      user = Admins::User.create!(valid_attributes)
      get admins_user_url(user)
      expect(response).to(be_successful)
    end
  end

  describe "GET /new" do
    it "renders a successful response" do
      get new_admins_user_url
      expect(response).to(be_successful)
    end
  end

  describe "GET /edit" do
    it "renders a successful response" do
      user = Admins::User.create!(valid_attributes)
      get edit_admins_user_url(user)
      expect(response).to(be_successful)
    end
  end

  describe "POST /create" do
    context "with valid parameters" do
      it "creates a new Admins::User" do
        expect do
          post(admins_users_url, params: { admins_user: valid_attributes })
        end.to(change(Admins::User, :count).by(1))
      end

      it "redirects to the created admins_user" do
        post admins_users_url, params: { admins_user: valid_attributes }
        expect(response).to(redirect_to(admins_user_url(Admins::User.last)))
      end
    end

    context "with invalid parameters" do
      it "does not create a new Admins::User" do
        expect do
          post(admins_users_url, params: { admins_user: invalid_attributes })
        end.not_to(change(Admins::User, :count))
      end

      it "renders a response with 422 status (i.e. to display the 'new' template)" do
        post admins_users_url, params: { admins_user: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "PATCH /update" do
    context "with valid parameters" do
      let(:new_attributes) do
        skip("Add a hash of attributes valid for your model")
      end

      it "updates the requested admins_user" do
        user = Admins::User.create!(valid_attributes)
        patch admins_user_url(user), params: { admins_user: new_attributes }
        user.reload
        skip("Add assertions for updated state")
      end

      it "redirects to the admins_user" do
        user = Admins::User.create!(valid_attributes)
        patch admins_user_url(user), params: { admins_user: new_attributes }
        user.reload
        expect(response).to(redirect_to(admins_user_url(user)))
      end
    end

    context "with invalid parameters" do
      it "renders a response with 422 status (i.e. to display the 'edit' template)" do
        user = Admins::User.create!(valid_attributes)
        patch admins_user_url(user), params: { admins_user: invalid_attributes }
        expect(response).to(have_http_status(:unprocessable_entity))
      end
    end
  end

  describe "DELETE /destroy" do
    it "destroys the requested admins_user" do
      user = Admins::User.create!(valid_attributes)
      expect do
        delete(admins_user_url(user))
      end.to(change(Admins::User, :count).by(-1))
    end

    it "redirects to the admins_users list" do
      user = Admins::User.create!(valid_attributes)
      delete admins_user_url(user)
      expect(response).to(redirect_to(admins_users_url))
    end
  end
end
